package model.VO;

import oracle.jbo.domain.Number;
import oracle.jbo.domain.RowID;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Feb 21 17:54:45 IST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CalcViewRowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Column1 {
            public Object get(CalcViewRowImpl obj) {
                return obj.getColumn1();
            }

            public void put(CalcViewRowImpl obj, Object value) {
                obj.setColumn1((Number)value);
            }
        }
        ,
        Column2 {
            public Object get(CalcViewRowImpl obj) {
                return obj.getColumn2();
            }

            public void put(CalcViewRowImpl obj, Object value) {
                obj.setColumn2((Number)value);
            }
        }
        ,
        Column3 {
            public Object get(CalcViewRowImpl obj) {
                return obj.getColumn3();
            }

            public void put(CalcViewRowImpl obj, Object value) {
                obj.setColumn3((Number)value);
            }
        }
        ,
        Column4 {
            public Object get(CalcViewRowImpl obj) {
                return obj.getColumn4();
            }

            public void put(CalcViewRowImpl obj, Object value) {
                obj.setColumn4((Number)value);
            }
        }
        ,
        Column6 {
            public Object get(CalcViewRowImpl obj) {
                return obj.getColumn6();
            }

            public void put(CalcViewRowImpl obj, Object value) {
                obj.setColumn6((Number)value);
            }
        }
        ,
        Column7 {
            public Object get(CalcViewRowImpl obj) {
                return obj.getColumn7();
            }

            public void put(CalcViewRowImpl obj, Object value) {
                obj.setColumn7((Number)value);
            }
        }
        ,
        RowID {
            public Object get(CalcViewRowImpl obj) {
                return obj.getRowID();
            }

            public void put(CalcViewRowImpl obj, Object value) {
                obj.setRowID((RowID)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(CalcViewRowImpl object);

        public abstract void put(CalcViewRowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int COLUMN1 = AttributesEnum.Column1.index();
    public static final int COLUMN2 = AttributesEnum.Column2.index();
    public static final int COLUMN3 = AttributesEnum.Column3.index();
    public static final int COLUMN4 = AttributesEnum.Column4.index();
    public static final int COLUMN6 = AttributesEnum.Column6.index();
    public static final int COLUMN7 = AttributesEnum.Column7.index();
    public static final int ROWID = AttributesEnum.RowID.index();

    /**
     * This is the default constructor (do not remove).
     */
    public CalcViewRowImpl() {
    }

    /**
     * Gets Calc entity object.
     * @return the Calc
     */
    public EntityImpl getCalc() {
        return (EntityImpl)getEntity(0);
    }

    /**
     * Gets the attribute value for COLUMN1 using the alias name Column1.
     * @return the COLUMN1
     */
    public Number getColumn1() {
        return (Number) getAttributeInternal(COLUMN1);
    }

    /**
     * Sets <code>value</code> as attribute value for COLUMN1 using the alias name Column1.
     * @param value value to set the COLUMN1
     */
    public void setColumn1(Number value) {
        setAttributeInternal(COLUMN1, value);
    }

    /**
     * Gets the attribute value for COLUMN2 using the alias name Column2.
     * @return the COLUMN2
     */
    public Number getColumn2() {
        return (Number) getAttributeInternal(COLUMN2);
    }

    /**
     * Sets <code>value</code> as attribute value for COLUMN2 using the alias name Column2.
     * @param value value to set the COLUMN2
     */
    public void setColumn2(Number value) {
        setAttributeInternal(COLUMN2, value);
    }

    /**
     * Gets the attribute value for COLUMN3 using the alias name Column3.
     * @return the COLUMN3
     */
    public Number getColumn3() {
        
        return (Number) getAttributeInternal(COLUMN3);
    }

    /**
     * Sets <code>value</code> as attribute value for COLUMN3 using the alias name Column3.
     * @param value value to set the COLUMN3
     */
    public void setColumn3(Number value) {
        setAttributeInternal(COLUMN3, value);
    }

    /**
     * Gets the attribute value for COLUMN4 using the alias name Column4.
     * @return the COLUMN4
     */
    public Number getColumn4() {

        return (Number) getAttributeInternal(COLUMN4);
    }

    /**
     * Sets <code>value</code> as attribute value for COLUMN4 using the alias name Column4.
     * @param value value to set the COLUMN4
     */
    public void setColumn4(Number value) {
        setAttributeInternal(COLUMN4, value);
    }

    /**
     * Gets the attribute value for COLUMN6 using the alias name Column6.
     * @return the COLUMN6
     */
    public Number getColumn6() {
        return (Number) getAttributeInternal(COLUMN6);
    }

    /**
     * Sets <code>value</code> as attribute value for COLUMN6 using the alias name Column6.
     * @param value value to set the COLUMN6
     */
    public void setColumn6(Number value) {
        setAttributeInternal(COLUMN6, value);
    }

    /**
     * Gets the attribute value for COLUMN7 using the alias name Column7.
     * @return the COLUMN7
     */
    public Number getColumn7() {
        return (Number) getAttributeInternal(COLUMN7);
    }

    /**
     * Sets <code>value</code> as attribute value for COLUMN7 using the alias name Column7.
     * @param value value to set the COLUMN7
     */
    public void setColumn7(Number value) {
        setAttributeInternal(COLUMN7, value);
    }

    /**
     * Gets the attribute value for ROWID using the alias name RowID.
     * @return the ROWID
     */
    public RowID getRowID() {
        return (RowID) getAttributeInternal(ROWID);
    }

    /**
     * Sets <code>value</code> as attribute value for ROWID using the alias name RowID.
     * @param value value to set the ROWID
     */
    public void setRowID(RowID value) {
        setAttributeInternal(ROWID, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
